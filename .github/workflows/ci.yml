name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: write

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      # Checkout do repositório
      - name: Checkout repository
        uses: actions/checkout@v4

      # Configurar o ambiente Docker
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Fazer o build da imagem Docker inicial (mantendo arquivos de teste)
      - name: Build Docker image for testing
        run: |
          docker build --build-arg RUN_TESTS=false --build-arg REMOVE_TEST_FILES=false -t css-validator:test .

      # Rodar os testes em um passo separado
      - name: Run integration tests
        run: |
          # Iniciar o container em background e mapear a porta 8080
          docker run -d -p 8080:8080 --name css-validator-container css-validator:test
          # Aguardar até que o servidor esteja pronto (porta 8080)
          for i in {1..30}; do
            if curl -s -o /dev/null -w "%{http_code}" http://localhost:8080; then
              echo "Server is up!"
              break
            fi
            echo "Waiting for server... ($i/30)"
            sleep 1
          done
          # Executar os testes usando PHPUnit dentro do container
          docker exec css-validator-container sh -c "composer install --no-interaction && ./vendor/bin/phpunit --configuration phpunit.xml"

      # Fazer o build da imagem Docker final (removendo arquivos de teste)
      - name: Build final Docker image
        run: |
          docker build --build-arg RUN_TESTS=false -t css-validator:latest .

      # Salvar a imagem Docker final para uso no próximo job
      - name: Save Docker image
        run: |
          docker save -o css-validator.tar css-validator:latest

      # Fazer upload da imagem como artefato
      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: css-validator-image
          path: css-validator.tar

      # Parar e remover o container após os testes
      - name: Stop and remove container
        if: always()
        run: |
          docker stop css-validator-container || true
          docker rm css-validator-container || true

  release:
    needs: build-and-test # Só roda se o "build-and-test" for bem-sucedido
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      # Checkout do repositório
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Necessário para o Semantic Release analisar o histórico de commits

      # Configurar o ambiente Docker
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Baixar a imagem Docker salva como artefato
      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: css-validator-image
          path: .

      # Carregar a imagem Docker
      - name: Load Docker image
        run: |
          docker load -i css-validator.tar

      # Configurar o ambiente Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      # Instalar dependências do Semantic Release
      - name: Install dependencies
        run: npm install -g semantic-release @semantic-release/changelog @semantic-release/git @semantic-release/github

      # Executar o Semantic Release para determinar a nova versão
      - name: Run Semantic Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release

      # Fazer login no Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Fazer o push da imagem para o Docker Hub com a versão do Semantic Release
      - name: Push Docker image to Docker Hub
        run: |
          # Obter a versão gerada pelo Semantic Release a partir da tag mais recente
          VERSION=$(git describe --tags --abbrev=0 | sed 's/^v//')
          # Taggear a imagem com a versão e latest
          docker tag css-validator:latest ${{ secrets.DOCKERHUB_USERNAME }}/css-validator:$VERSION
          docker tag css-validator:latest ${{ secrets.DOCKERHUB_USERNAME }}/css-validator:latest
          # Fazer o push das duas tags
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/css-validator:$VERSION
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/css-validator:latest